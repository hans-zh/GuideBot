<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Guidebot\Guidebot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Guidebot\Guidebot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Jun 17 17:10:31 2019
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; setup &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[65]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[65]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[63]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[64]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[66]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[67]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">pid_callback(const riki_msgs::PID&)</a> from mainpp.o(i._Z12pid_callbackRKN9riki_msgs3PIDE) referenced from mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
 <LI><a href="#[6a]">command_callback(const geometry_msgs::Twist&)</a> from mainpp.o(i._Z16command_callbackRKN13geometry_msgs5TwistE) referenced from mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
 <LI><a href="#[6f]">geometry_msgs::Twist::deserialize(unsigned char*)</a> from mainpp.o(i._ZN13geometry_msgs5Twist11deserializeEPh) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[71]">geometry_msgs::Twist::getMD5()</a> from mainpp.o(i._ZN13geometry_msgs5Twist6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[70]">geometry_msgs::Twist::getType()</a> from mainpp.o(i._ZN13geometry_msgs5Twist7getTypeEv) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[73]">geometry_msgs::Vector3::deserialize(unsigned char*)</a> from mainpp.o(i._ZN13geometry_msgs7Vector311deserializeEPh) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[75]">geometry_msgs::Vector3::getMD5()</a> from mainpp.o(i._ZN13geometry_msgs7Vector36getMD5Ev) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[74]">geometry_msgs::Vector3::getType()</a> from mainpp.o(i._ZN13geometry_msgs7Vector37getTypeEv) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[77]">rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</a> from mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[79]">rosserial_msgs::RequestParamResponse::getMD5()</a> from mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[78]">rosserial_msgs::RequestParamResponse::getType()</a> from mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[7c]">rosserial_msgs::Log::getMD5()</a> from mainpp.o(i._ZN14rosserial_msgs3Log6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[7b]">rosserial_msgs::Log::getType()</a> from mainpp.o(i._ZN14rosserial_msgs3Log7getTypeEv) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[7f]">rosserial_msgs::TopicInfo::getMD5()</a> from mainpp.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[7e]">rosserial_msgs::TopicInfo::getType()</a> from mainpp.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[82]">ros::Subscriber&lang;geometry_msgs::Twist&rang;::getMsgType()</a> from mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE10getMsgTypeEv) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
 <LI><a href="#[81]">ros::Subscriber&lang;geometry_msgs::Twist&rang;::getEndpointType()</a> from mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE15getEndpointTypeEv) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
 <LI><a href="#[80]">ros::Subscriber&lang;geometry_msgs::Twist&rang;::callback(unsigned char*)</a> from mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE8callbackEPh) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
 <LI><a href="#[83]">ros::Subscriber&lang;geometry_msgs::Twist&rang;::getMsgMD5()</a> from mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE9getMsgMD5Ev) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
 <LI><a href="#[86]">ros::Subscriber&lang;riki_msgs::PID&rang;::getMsgType()</a> from mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE10getMsgTypeEv) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
 <LI><a href="#[85]">ros::Subscriber&lang;riki_msgs::PID&rang;::getEndpointType()</a> from mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE15getEndpointTypeEv) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
 <LI><a href="#[84]">ros::Subscriber&lang;riki_msgs::PID&rang;::callback(unsigned char*)</a> from mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE8callbackEPh) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
 <LI><a href="#[87]">ros::Subscriber&lang;riki_msgs::PID&rang;::getMsgMD5()</a> from mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE9getMsgMD5Ev) referenced from mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
 <LI><a href="#[88]">ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)</a> from mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE) referenced from mainpp.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
 <LI><a href="#[89]">ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()</a> from mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv) referenced from mainpp.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
 <LI><a href="#[69]">Gy85::~Gy85()</a> from mainpp.o(i._ZN4Gy85D1Ev) referenced from mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
 <LI><a href="#[6d]">TwoWire::begin(unsigned char)</a> from wire.o(i._ZN7TwoWire5beginEh) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[6c]">TwoWire::process()</a> from wire.o(i._ZN7TwoWire7processEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[8b]">std_msgs::Time::deserialize(unsigned char*)</a> from mainpp.o(i._ZN8std_msgs4Time11deserializeEPh) referenced from mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[8d]">std_msgs::Time::getMD5()</a> from mainpp.o(i._ZN8std_msgs4Time6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[8c]">std_msgs::Time::getType()</a> from mainpp.o(i._ZN8std_msgs4Time7getTypeEv) referenced from mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[90]">riki_msgs::Velocities::getMD5()</a> from mainpp.o(i._ZN9riki_msgs10Velocities6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
 <LI><a href="#[8f]">riki_msgs::Velocities::getType()</a> from mainpp.o(i._ZN9riki_msgs10Velocities7getTypeEv) referenced from mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
 <LI><a href="#[93]">riki_msgs::Imu::getMD5()</a> from mainpp.o(i._ZN9riki_msgs3Imu6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
 <LI><a href="#[92]">riki_msgs::Imu::getType()</a> from mainpp.o(i._ZN9riki_msgs3Imu7getTypeEv) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
 <LI><a href="#[95]">riki_msgs::PID::deserialize(unsigned char*)</a> from mainpp.o(i._ZN9riki_msgs3PID11deserializeEPh) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
 <LI><a href="#[97]">riki_msgs::PID::getMD5()</a> from mainpp.o(i._ZN9riki_msgs3PID6getMD5Ev) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
 <LI><a href="#[96]">riki_msgs::PID::getType()</a> from mainpp.o(i._ZN9riki_msgs3PID7getTypeEv) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
 <LI><a href="#[6e]">geometry_msgs::Twist::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK13geometry_msgs5Twist9serializeEPh) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[72]">geometry_msgs::Vector3::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK13geometry_msgs7Vector39serializeEPh) referenced from mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[76]">rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[7a]">rosserial_msgs::Log::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK14rosserial_msgs3Log9serializeEPh) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[7d]">rosserial_msgs::TopicInfo::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh) referenced from mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[8a]">std_msgs::Time::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK8std_msgs4Time9serializeEPh) referenced from mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[8e]">riki_msgs::Velocities::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK9riki_msgs10Velocities9serializeEPh) referenced from mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
 <LI><a href="#[91]">riki_msgs::Imu::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK9riki_msgs3Imu9serializeEPh) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
 <LI><a href="#[94]">riki_msgs::PID::serialize(unsigned char*) const</a> from mainpp.o(i._ZNK9riki_msgs3PID9serializeEPh) referenced from mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[98]">__sti___10_mainpp_cpp_3a322398</a> from mainpp.o(i.__sti___10_mainpp_cpp_3a322398) referenced from mainpp.o(.init_array)
 <LI><a href="#[68]">_sputc</a> from printf4.o(i._sputc) referenced from printf4.o(i.__0sprintf$4)
 <LI><a href="#[5f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[155]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9c]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[156]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[157]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[158]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9d]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[159]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::init()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
</UL>

<P><STRONG><a name="[99]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics(int, float, float, float)
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics(int, float, float, float)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics(int, float, float, float)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[160]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[161]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[9e]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[b4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[163]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[aa]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[164]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[bc]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::init()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[13b]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::sda_read()
</UL>

<P><STRONG><a name="[130]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::spin(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::init()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[be]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Encoder_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainpp.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainpp.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[103]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>MX_GPIO_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>MX_TIM2_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>MX_TIM3_Init</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>MX_TIM4_Init</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_TIM5_Init</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d6]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
</UL>

<P><STRONG><a name="[cd]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e2]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>print_debug()</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, mainpp.o(i._Z11print_debugv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_debug() &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::read()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[10a]"></a>publish_imu()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mainpp.o(i._Z11publish_imuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = publish_imu() &rArr; Gy85::measure_magnetometer() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::operator =(const geometry_msgs::Vector3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[6b]"></a>pid_callback(const riki_msgs::PID&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mainpp.o(i._Z12pid_callbackRKN9riki_msgs3PIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pid_callback(const riki_msgs::PID&)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::updateConstants(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
</UL>
<P><STRONG><a name="[6a]"></a>command_callback(const geometry_msgs::Twist&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mainpp.o(i._Z16command_callbackRKN13geometry_msgs5TwistE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_callback(const geometry_msgs::Twist&)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
</UL>
<P><STRONG><a name="[113]"></a>check_imu()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mainpp.o(i._Z9check_imuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_imu() &rArr; Gy85::check_accelerometer() &rArr; Gy85::check_id(int, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_accelerometer()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_magnetometer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_gyroscope()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::logerror(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[118]"></a>move_base()</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mainpp.o(i._Z9move_basev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = move_base() &rArr; PID::compute(float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::spin(int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute(float, float)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::getRPM(float, float, float)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::getVelocities(int, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[14a]"></a>stop_base()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mainpp.o(i._Z9stop_basev))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[11e]"></a>Kinematics::calculateRPM(float, float, float)</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, kinematics.o(i._ZN10Kinematics12calculateRPMEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kinematics::calculateRPM(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::getRPM(float, float, float)
</UL>

<P><STRONG><a name="[11d]"></a>Kinematics::getVelocities(int, int)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, kinematics.o(i._ZN10Kinematics13getVelocitiesEii))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[119]"></a>Kinematics::getRPM(float, float, float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, kinematics.o(i._ZN10Kinematics6getRPMEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kinematics::getRPM(float, float, float) &rArr; Kinematics::calculateRPM(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::calculateRPM(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[11f]"></a>Kinematics::Kinematics(int, float, float, float)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kinematics.o(i._ZN10KinematicsC1Eifff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Kinematics::Kinematics(int, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[166]"></a>Kinematics::Kinematics__sub_object(int, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, kinematics.o(i._ZN10KinematicsC1Eifff), UNUSED)

<P><STRONG><a name="[f5]"></a>STM32Hardware::reset_rbuf()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mainpp.o(i._ZN13STM32Hardware10reset_rbufEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[112]"></a>STM32Hardware::time()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mainpp.o(i._ZN13STM32Hardware4timeEv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_callback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[f7]"></a>STM32Hardware::flush()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mainpp.o(i._ZN13STM32Hardware5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[6f]"></a>geometry_msgs::Twist::deserialize(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mainpp.o(i._ZN13geometry_msgs5Twist11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[71]"></a>geometry_msgs::Twist::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs5Twist6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[70]"></a>geometry_msgs::Twist::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs5Twist7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[73]"></a>geometry_msgs::Vector3::deserialize(unsigned char*)</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, mainpp.o(i._ZN13geometry_msgs7Vector311deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[75]"></a>geometry_msgs::Vector3::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs7Vector36getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[74]"></a>geometry_msgs::Vector3::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs7Vector37getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[146]"></a>geometry_msgs::Vector3::Vector3()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs7Vector3C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[167]"></a>geometry_msgs::Vector3::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs7Vector3C1Ev), UNUSED)

<P><STRONG><a name="[10d]"></a>geometry_msgs::Vector3::operator =(const geometry_msgs::Vector3&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mainpp.o(i._ZN13geometry_msgs7Vector3aSERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
</UL>

<P><STRONG><a name="[77]"></a>rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[79]"></a>rosserial_msgs::RequestParamResponse::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[78]"></a>rosserial_msgs::RequestParamResponse::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[7c]"></a>rosserial_msgs::Log::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs3Log6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[7b]"></a>rosserial_msgs::Log::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs3Log7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[7f]"></a>rosserial_msgs::TopicInfo::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[7e]"></a>rosserial_msgs::TopicInfo::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[110]"></a>PID::updateConstants(float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid.o(i._ZN3PID15updateConstantsEfff))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_callback(const riki_msgs::PID&)
</UL>

<P><STRONG><a name="[11b]"></a>PID::compute(float, float)</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, pid.o(i._ZN3PID7computeEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PID::compute(float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[143]"></a>PID::PID(float, float, float, float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(i._ZN3PIDC1Efffff))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[168]"></a>PID::PID__sub_object(float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3PIDC1Efffff), UNUSED)

<P><STRONG><a name="[153]"></a>ros::normalizeSecNSec(unsigned long&, unsigned long&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time.o(i._ZN3ros16normalizeSecNSecERmS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ros::normalizeSecNSec(unsigned long&, unsigned long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[10f]"></a>ros::Publisher::publish(const ros::Msg*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mainpp.o(i._ZN3ros9Publisher7publishEPKNS_3MsgE))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
</UL>

<P><STRONG><a name="[124]"></a>Gy85::send_value(int, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gy85.o(i._ZN4Gy8510send_valueEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gy85::send_value(int, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
</UL>

<P><STRONG><a name="[114]"></a>Gy85::check_gyroscope()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gy85.o(i._ZN4Gy8515check_gyroscopeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gy85::check_gyroscope() &rArr; Gy85::check_id(int, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_imu()
</UL>

<P><STRONG><a name="[10c]"></a>Gy85::measure_gyroscope()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gy85.o(i._ZN4Gy8517measure_gyroscopeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gy85::measure_gyroscope() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::available()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(int, int)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
</UL>

<P><STRONG><a name="[129]"></a>Gy85::write_to_register(int, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gy85.o(i._ZN4Gy8517write_to_registerEihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gy85::write_to_register(int, unsigned char, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_accelerometer()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_magnetometer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_gyroscope()
</UL>

<P><STRONG><a name="[116]"></a>Gy85::check_magnetometer()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gy85.o(i._ZN4Gy8518check_magnetometerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gy85::check_magnetometer() &rArr; Gy85::write_to_register(int, unsigned char, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_imu()
</UL>

<P><STRONG><a name="[115]"></a>Gy85::check_accelerometer()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gy85.o(i._ZN4Gy8519check_accelerometerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gy85::check_accelerometer() &rArr; Gy85::check_id(int, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_imu()
</UL>

<P><STRONG><a name="[10b]"></a>Gy85::measure_acceleration()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gy85.o(i._ZN4Gy8520measure_accelerationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gy85::measure_acceleration() &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::available()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(int, int)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
</UL>

<P><STRONG><a name="[10e]"></a>Gy85::measure_magnetometer()</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, gy85.o(i._ZN4Gy8520measure_magnetometerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Gy85::measure_magnetometer() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::available()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(int, int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
</UL>

<P><STRONG><a name="[12d]"></a>Gy85::init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gy85.o(i._ZN4Gy854initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gy85::init() &rArr; TwoWire::begin(unsigned char) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[128]"></a>Gy85::check_id(int, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gy85.o(i._ZN4Gy858check_idEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gy85::check_id(int, unsigned char) &rArr; WireBase::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_accelerometer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_gyroscope()
</UL>

<P><STRONG><a name="[69]"></a>Gy85::~Gy85()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mainpp.o(i._ZN4Gy85D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gy85::~Gy85()
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(i.__sti___10_mainpp_cpp_3a322398)
</UL>
<P><STRONG><a name="[169]"></a>Gy85::~Gy85__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainpp.o(i._ZN4Gy85D1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>Motor::init()</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, motor.o(i._ZN5Motor4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor::init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[11c]"></a>Motor::spin(int)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor4spinEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor::spin(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[144]"></a>Motor::Motor(Motor_TypeDef, unsigned, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i._ZN5MotorC1E13Motor_TypeDefjj))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[16a]"></a>Motor::Motor__sub_object(Motor_TypeDef, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, motor.o(i._ZN5MotorC1E13Motor_TypeDefjj), UNUSED)

<P><STRONG><a name="[14e]"></a>Encoder::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[107]"></a>Encoder::read()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getRPM()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_debug()
</UL>

<P><STRONG><a name="[11a]"></a>Encoder::getRPM()</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, encoder.o(i._ZN7Encoder6getRPMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Encoder::getRPM() &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::read()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
</UL>

<P><STRONG><a name="[145]"></a>Encoder::Encoder(Encoder_TypeDef, unsigned, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, encoder.o(i._ZN7EncoderC1E15Encoder_TypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder::Encoder(Encoder_TypeDef, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[16b]"></a>Encoder::Encoder__sub_object(Encoder_TypeDef, unsigned, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, encoder.o(i._ZN7EncoderC1E15Encoder_TypeDefjjj), UNUSED)

<P><STRONG><a name="[131]"></a>TwoWire::i2c_get_ack()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire11i2c_get_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TwoWire::i2c_get_ack() &rArr; TwoWire::sda_read()
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::sda_read()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[135]"></a>TwoWire::i2c_send_ack()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire12i2c_send_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::i2c_send_ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[136]"></a>TwoWire::i2c_shift_in()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire12i2c_shift_inEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TwoWire::i2c_shift_in() &rArr; TwoWire::sda_read()
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::sda_read()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[137]"></a>TwoWire::i2c_send_nack()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire13i2c_send_nackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::i2c_send_nack()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[138]"></a>TwoWire::i2c_shift_out(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire13i2c_shift_outEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TwoWire::i2c_shift_out(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[6d]"></a>TwoWire::begin(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, wire.o(i._ZN7TwoWire5beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TwoWire::begin(unsigned char) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[6c]"></a>TwoWire::process()</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire7processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TwoWire::process() &rArr; TwoWire::i2c_shift_out(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[132]"></a>TwoWire::set_scl(bool)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire7set_sclEb))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[133]"></a>TwoWire::set_sda(bool)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire7set_sdaEb))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>TwoWire::i2c_stop()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire8i2c_stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::i2c_stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[134]"></a>TwoWire::sda_read()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire8sda_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::sda_read()
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[139]"></a>TwoWire::i2c_start()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire9i2c_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::i2c_start()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[147]"></a>TwoWire::TwoWire(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireC1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[16c]"></a>TwoWire::TwoWire__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireC1Eh), UNUSED)

<P><STRONG><a name="[12e]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::~Gy85()
</UL>

<P><STRONG><a name="[16d]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[13c]"></a>WireBase::requestFrom(unsigned char, int)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase11requestFromEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(int, int)
</UL>

<P><STRONG><a name="[12a]"></a>WireBase::requestFrom(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wirebase.o(i._ZN8WireBase11requestFromEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::requestFrom(int, int) &rArr; WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>WireBase::endTransmission()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>WireBase::beginTransmission(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wirebase.o(i._ZN8WireBase17beginTransmissionEh))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(int)
</UL>

<P><STRONG><a name="[125]"></a>WireBase::beginTransmission(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wirebase.o(i._ZN8WireBase17beginTransmissionEi))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>

<P><STRONG><a name="[12b]"></a>WireBase::read()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
</UL>

<P><STRONG><a name="[126]"></a>WireBase::write(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::check_id(int, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::write_to_register(int, unsigned char, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::send_value(int, unsigned char)
</UL>

<P><STRONG><a name="[12c]"></a>WireBase::available()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wirebase.o(i._ZN8WireBase9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_magnetometer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_acceleration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::measure_gyroscope()
</UL>

<P><STRONG><a name="[8b]"></a>std_msgs::Time::deserialize(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mainpp.o(i._ZN8std_msgs4Time11deserializeEPh))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[8d]"></a>std_msgs::Time::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN8std_msgs4Time6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[8c]"></a>std_msgs::Time::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN8std_msgs4Time7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[151]"></a>std_msgs::Time::Time()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mainpp.o(i._ZN8std_msgs4TimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
</UL>

<P><STRONG><a name="[16e]"></a>std_msgs::Time::Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainpp.o(i._ZN8std_msgs4TimeC1Ev), UNUSED)

<P><STRONG><a name="[90]"></a>riki_msgs::Velocities::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs10Velocities6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
</UL>
<P><STRONG><a name="[8f]"></a>riki_msgs::Velocities::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs10Velocities7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
</UL>
<P><STRONG><a name="[93]"></a>riki_msgs::Imu::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs3Imu6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
</UL>
<P><STRONG><a name="[92]"></a>riki_msgs::Imu::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs3Imu7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
</UL>
<P><STRONG><a name="[95]"></a>riki_msgs::PID::deserialize(unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mainpp.o(i._ZN9riki_msgs3PID11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = riki_msgs::PID::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;riki_msgs::PID&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
</UL>
<P><STRONG><a name="[97]"></a>riki_msgs::PID::getMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs3PID6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
</UL>
<P><STRONG><a name="[96]"></a>riki_msgs::PID::getType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(i._ZN9riki_msgs3PID7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
</UL>
<P><STRONG><a name="[6e]"></a>geometry_msgs::Twist::serialize(unsigned char*) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mainpp.o(i._ZNK13geometry_msgs5Twist9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = geometry_msgs::Twist::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[72]"></a>geometry_msgs::Vector3::serialize(unsigned char*) const</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, mainpp.o(i._ZNK13geometry_msgs7Vector39serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;riki_msgs::Imu::serialize(unsigned char*) const
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[76]"></a>rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mainpp.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[7a]"></a>rosserial_msgs::Log::serialize(unsigned char*) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mainpp.o(i._ZNK14rosserial_msgs3Log9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rosserial_msgs::Log::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[7d]"></a>rosserial_msgs::TopicInfo::serialize(unsigned char*) const</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mainpp.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rosserial_msgs::TopicInfo::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[8a]"></a>std_msgs::Time::serialize(unsigned char*) const</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mainpp.o(i._ZNK8std_msgs4Time9serializeEPh))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[8e]"></a>riki_msgs::Velocities::serialize(unsigned char*) const</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mainpp.o(i._ZNK9riki_msgs10Velocities9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = riki_msgs::Velocities::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs10VelocitiesE)
</UL>
<P><STRONG><a name="[91]"></a>riki_msgs::Imu::serialize(unsigned char*) const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mainpp.o(i._ZNK9riki_msgs3Imu9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = riki_msgs::Imu::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3ImuE)
</UL>
<P><STRONG><a name="[94]"></a>riki_msgs::PID::serialize(unsigned char*) const</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mainpp.o(i._ZNK9riki_msgs3PID9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = riki_msgs::PID::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN9riki_msgs3PIDE)
</UL>
<P><STRONG><a name="[140]"></a>__0sprintf$4</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16f]"></a>__1sprintf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)

<P><STRONG><a name="[108]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_debug()
</UL>

<P><STRONG><a name="[b5]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[a6]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[171]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[172]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[149]"></a>loop</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mainpp.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = loop &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_base()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_base()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_imu()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_imu()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_debug()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; setup &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[120]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
</UL>

<P><STRONG><a name="[14d]"></a>setup</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, mainpp.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = setup &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::init()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::init()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gy85::init()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::advertise(ros::Publisher&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::reset_rbuf()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>ros::Subscriber&lang;geometry_msgs::Twist&rang;::getMsgType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
</UL>
<P><STRONG><a name="[81]"></a>ros::Subscriber&lang;geometry_msgs::Twist&rang;::getEndpointType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
</UL>
<P><STRONG><a name="[80]"></a>ros::Subscriber&lang;geometry_msgs::Twist&rang;::callback(unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::Twist&rang;::callback(unsigned char*) &rArr; geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
</UL>
<P><STRONG><a name="[83]"></a>ros::Subscriber&lang;geometry_msgs::Twist&rang;::getMsgMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEEE)
</UL>
<P><STRONG><a name="[86]"></a>ros::Subscriber&lang;riki_msgs::PID&rang;::getMsgType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
</UL>
<P><STRONG><a name="[85]"></a>ros::Subscriber&lang;riki_msgs::PID&rang;::getEndpointType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
</UL>
<P><STRONG><a name="[84]"></a>ros::Subscriber&lang;riki_msgs::PID&rang;::callback(unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ros::Subscriber&lang;riki_msgs::PID&rang;::callback(unsigned char*) &rArr; riki_msgs::PID::deserialize(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;riki_msgs::PID::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
</UL>
<P><STRONG><a name="[87]"></a>ros::Subscriber&lang;riki_msgs::PID&rang;::getMsgMD5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros10SubscriberIN9riki_msgs3PIDEE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros10SubscriberIN9riki_msgs3PIDEEE)
</UL>
<P><STRONG><a name="[152]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[150]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()
</UL>

<P><STRONG><a name="[109]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::logerror(const char*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_debug()
</UL>

<P><STRONG><a name="[88]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*) &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::logerror(const char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::flush()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
</UL>
<P><STRONG><a name="[117]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::logerror(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::logerror(const char*) &rArr; ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::log(char, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::publish(int, const ros::Msg*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_imu()
</UL>

<P><STRONG><a name="[89]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce()</STRONG> (Thumb, 656 bytes, Stack size 56 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::normalizeSecNSec(unsigned long&, unsigned long&)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::requestSyncTime()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::negotiateTopics()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::deserialize(unsigned char*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32Hardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.constdata__ZTVN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE)
</UL>
<P><STRONG><a name="[14f]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::advertise(ros::Publisher&)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[148]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_mainpp_cpp_3a322398
</UL>

<P><STRONG><a name="[173]"></a>ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle___sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainpp.o(t._ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[98]"></a>__sti___10_mainpp_cpp_3a322398</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, mainpp.o(i.__sti___10_mainpp_cpp_3a322398))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sti___10_mainpp_cpp_3a322398 &rArr; Kinematics::Kinematics(int, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(unsigned char)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder_TypeDef, unsigned, unsigned, unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor_TypeDef, unsigned, unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float, float)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics(int, float, float, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;STM32Hardware, (int)25, (int)25, (int)512, (int)512&rang;::NodeHandle_()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainpp.o(.init_array)
</UL>
<P><STRONG><a name="[d0]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e1]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[e3]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[e4]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ce]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[cf]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[62]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[65]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[63]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[64]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[66]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; STM32Hardware::flush() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[67]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[ea]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[101]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[e9]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; STM32Hardware::reset_rbuf() &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ed]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ba]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[bd]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[c4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[141]"></a>_printf_core</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, printf4.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
</UL>

<P><STRONG><a name="[68]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf4.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0sprintf$4)
</UL>
<P><STRONG><a name="[142]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
